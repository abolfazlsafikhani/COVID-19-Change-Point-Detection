#sim 1: two change points
T <- 250
brk <- c( floor(T/5*2), floor(T/5*4), T+1)
sd.log <- 0.01^0.5
beta_1 <- 0.10; beta_2 <- 0.05; beta_3 <- 0.10
gamma_1 <- 0.04; gamma_2 <- 0.06; gamma_3 <- 0.04
beta <- c(rep(beta_1, brk[1] - 1), rep(beta_2, (brk[2] - 1) - (brk[1] - 1) ), rep(beta_3, T - brk[2]) )
gamma <- c(rep(gamma_1, brk[1] - 1), rep(gamma_2,  (brk[2] - 1) - (brk[1] - 1) ), rep(gamma_3, T - brk[2]) )
}
if(sim == 1){
lambda.1 <- c(0.01, 0.005, 0.001, 0.0005, 0.0001)
}else{
lambda.1 <- NULL
}
##################################
# number of replicates
N <- 10
lm.res <- vector("list", N); var.coef.res <- vector("list", N);
Y.std.res <- vector("list", N); neighbor.std.res <- vector("list", N);
pts.final <- vector("list", N);
MRPE_1_Delta.final <- rep(0, N); MRPE_1_I_Delta.final <- rep(0, N); MRPE_1_R_Delta.final <- rep(0, N);
MRPE_2_Delta.final <- rep(0, N); MRPE_2_I_Delta.final <- rep(0, N); MRPE_2_R_Delta.final <- rep(0, N);
MRPE_3_Delta.final <- rep(0, N); MRPE_3_I_Delta.final <- rep(0, N); MRPE_3_R_Delta.final <- rep(0, N);
MRPE_1.final <- rep(0, N); MRPE_1_I.final <- rep(0, N); MRPE_1_R.final <- rep(0, N);
MRPE_2.final <- rep(0, N); MRPE_2_I.final <- rep(0, N); MRPE_2_R.final <- rep(0, N);
MRPE_3.final <- rep(0, N); MRPE_3_I.final <- rep(0, N); MRPE_3_R.final <- rep(0, N);
##################################
# number of replicates
N <- 3
lm.res <- vector("list", N); var.coef.res <- vector("list", N);
Y.std.res <- vector("list", N); neighbor.std.res <- vector("list", N);
pts.final <- vector("list", N);
MRPE_1_Delta.final <- rep(0, N); MRPE_1_I_Delta.final <- rep(0, N); MRPE_1_R_Delta.final <- rep(0, N);
MRPE_2_Delta.final <- rep(0, N); MRPE_2_I_Delta.final <- rep(0, N); MRPE_2_R_Delta.final <- rep(0, N);
MRPE_3_Delta.final <- rep(0, N); MRPE_3_I_Delta.final <- rep(0, N); MRPE_3_R_Delta.final <- rep(0, N);
MRPE_1.final <- rep(0, N); MRPE_1_I.final <- rep(0, N); MRPE_1_R.final <- rep(0, N);
MRPE_2.final <- rep(0, N); MRPE_2_I.final <- rep(0, N); MRPE_2_R.final <- rep(0, N);
MRPE_3.final <- rep(0, N); MRPE_3_I.final <- rep(0, N); MRPE_3_R.final <- rep(0, N);
for ( j.1 in 1:N){
set.seed(12345*j.1)
if( sim %in% c(1)){
I <- rep(0, T)
R <- rep(0, T)
beta_t <- c()
gamma_t <- c()
I[1] <- 1
for(i in 2:T){
temp.1 <- rlnorm(1, meanlog = log(beta[i-1]), sdlog = sd.log )
temp.2 <- rlnorm(1, meanlog = log(gamma[i-1]), sdlog = sd.log)
beta_t <- c(beta_t, temp.1)
gamma_t <- c(gamma_t, temp.2)
if(i == 2){
I[i] <- temp.1*I[i-1] - temp.2[1]*I[i-1] + I[i-1]
R[i] <- temp.2[1]*I[i-1] + R[i-1]
}else{
I[i] <- temp.1*I[i-1] - temp.2*I[i-1] + I[i-1]
R[i] <- temp.2*I[i-1] + R[i-1]
}
}
plot(1:T, I)
plot(1:T, R)
}
if( sim %in% c(2)){
data_e <- rmvnorm(T-1, mean = rep(0, 2), sigma = 1*diag(2))
I.neighbor <- rep(0, T)
R.neighbor <- rep(0, T)
I.neighbor[1] <- 1
beta_t.neighbor <- c()
gamma_t.neighbor <- c()
for(i in 2:T){
temp.1 <- beta.neighbor[i-1]
temp.2 <- gamma.neighbor[i-1]
beta_t.neighbor <- c(beta_t.neighbor, temp.1)
gamma_t.neighbor <- c(gamma_t.neighbor, temp.2)
I.neighbor[i] <- (temp.1*I.neighbor[i-1] - temp.2*I.neighbor[i-1] + I.neighbor[i-1])
R.neighbor[i] <- (temp.2*I.neighbor[i-1] + R.neighbor[i-1])
}
plot(1:T, I.neighbor)
plot(1:T, R.neighbor)
I<-rep(0, T)
R<-rep(0, T)
beta_t <- c()
gamma_t <- c()
I[1] <- 10
for(i in 2:T){
temp.1 <- beta[i-1]
temp.2 <- gamma[i-1]
beta_t <- c(beta_t, temp.1)
gamma_t <- c(gamma_t, temp.2)
if(i == 2){
I[i] <- (temp.1*I[i-1] - temp.2[1]*I[i-1] + I[i-1] + alpha*(I.neighbor[i] - I.neighbor[i-1])) + data_e[1, 1]
R[i] <- (temp.2[1]*I[i-1] + R[i-1] + alpha*(R.neighbor[i] - R.neighbor[i-1]  )) + data_e[1, 2]
}else{
I[i] <- (temp.1*I[i-1] - temp.2*I[i-1] + I[i-1] + alpha*(I.neighbor[i-1] - I.neighbor[i-2])) + data_e[i-1, 1]
R[i] <- (temp.2*I[i-1] + R[i-1] + alpha*(R.neighbor[i-1] - R.neighbor[i-2]))  + data_e[i-1, 2]
}
}
plot(1:T, I)
plot(1:T, R)
}
if( sim %in% c(3)){
q.t <- 1; p <- 2
phi.full <- matrix(0, p, p)
phi.full[1, 1] <- 0.8
phi.full[2, 2] <- 0.7
phi.full[1, 2] <- 0
phi.full[2, 1] <- 0.2
print(plot.ar.matrix((phi.full), p = 1))
phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full%*%phi.full
# e.sigma <- as.matrix(0.1*diag(p));
e.sigma <- as.matrix(1*diag(p));
t.test <- 20
# try = var.sim.break(T-1, arlags=seq(1, q.t, 1), malags = NULL, phi = phi.full, sigma = e.sigma, skip = 1, brk = c(T))
try = var.sim.break(T - 1 + t.test, arlags=seq(1, q.t, 1), malags = NULL, phi = phi.full, sigma = e.sigma, skip = 1, brk = c(T + t.test))
data_e <- try$series
data_e <- as.matrix(data_e, ncol = p)
data_e_vec <-  rep(0, nrow(data_e)*2)
data_e_vec[seq(1, nrow(data_e)*2, 2)] <- data_e[, 1]
data_e_vec[seq(2, nrow(data_e)*2, 2)] <- data_e[, 2]
data_e
VAR(data_e, p = q.t, type = "none")
I.neighbor <- rep(0, T + t.test)
R.neighbor <- rep(0, T + t.test)
I.neighbor[1] <- 1
beta_t.neighbor <- c()
gamma_t.neighbor <- c()
for(i in 2:(T + t.test)){
if(i > T){
temp.1 <- beta.neighbor[T-1]
temp.2 <- gamma.neighbor[T-1]
}else{
temp.1 <- beta.neighbor[i-1]
temp.2 <- gamma.neighbor[i-1]
}
beta_t.neighbor <- c(beta_t.neighbor, temp.1)
gamma_t.neighbor <- c(gamma_t.neighbor, temp.2)
I.neighbor[i] <- (temp.1*I.neighbor[i-1] - temp.2*I.neighbor[i-1] + I.neighbor[i-1])
R.neighbor[i] <- (temp.2*I.neighbor[i-1] + R.neighbor[i-1])
}
plot(1:(T + t.test), I.neighbor)
plot(1:(T + t.test), R.neighbor)
I<-rep(0, (T + t.test))
R<-rep(0, (T + t.test))
beta_t <- c()
gamma_t <- c()
I[1] <- 10
for(i in 2:(T + t.test)){
if(i > T){
temp.1 <- beta[T-1]
temp.2 <- gamma[T-1]
}else{
temp.1 <- beta[i-1]
temp.2 <- gamma[i-1]
}
beta_t <- c(beta_t, temp.1)
gamma_t <- c(gamma_t, temp.2)
if(i == 2){
I[i] <- (temp.1*I[i-1] - temp.2[1]*I[i-1] + I[i-1] + alpha*(I.neighbor[i] - I.neighbor[i-1])) + data_e[i-1, 2]
R[i] <- (temp.2[1]*I[i-1] + R[i-1] + alpha*(R.neighbor[i] - R.neighbor[i-1]  )) + data_e[1, 1]
}else{
I[i] <- (temp.1*I[i-1] - temp.2*I[i-1] + I[i-1] + alpha*(I.neighbor[i-1] - I.neighbor[i-2])) + data_e[i-1, 2]
R[i] <- (temp.2*I[i-1] + R[i-1] + alpha*(R.neighbor[i-1] - R.neighbor[i-2])) + data_e[i-1, 1]
}
}
plot(1:(T + t.test), I)
plot(1:(T + t.test), R)
}
if( j.1 == 1){
filename <- paste0("Sim_", sim ,".pdf")
pdf(filename, width = 11, height = 8.5)
ylim_max <- 0.15
par(mar = c(4., 4.5, 1.5, 1))
plot(1:length(beta_t), beta_t, type = "l", col = "dark orange", lwd=3, ylim = c(0,ylim_max),
xlab = "t", ylab = "Rate" , cex.lab=2 , cex.axis=2)
lines(1:length(gamma_t), gamma_t,type = "l",col="dark green", lwd=3)
legend( T*3/4, ylim_max, legend=c(expression(beta(t)),  expression(gamma(t)) ),
col=c("dark orange", "dark green"), bty = "n", lwd = 3, cex=1.5, pt.cex = 1, bg="transparent",
seg.len=1.5, y.intersp=1 , x.intersp=1)
dev.off()
}
if( j.1 == 1 & sim == 3){
filename <- paste0("Sim_", sim ,"_varcoef.pdf")
pdf(filename, width = 11, height = 8.5)
ylim_max <- 0.15
par(mar = c(4., 4.5, 1.5, 1))
print(plot.ar.matrix((phi.full), p = 1))
dev.off()
}
if( (sim %in% c(2)) & (j.1 == 1)){
filename <- paste0("Sim_", sim ,"_spatial.pdf")
pdf(filename, width=11, height=8.5)
ylim_max <- 0.2
par(mar = c(4., 4.5, 1.5, 1))
plot(1:length(beta_t.neighbor), beta_t.neighbor, type = "l", col = "dark orange", lwd = 3, ylim = c(0,ylim_max),
xlab = "t", ylab = "Rate" , cex.lab = 2 , cex.axis = 2)
lines(1:length(gamma_t.neighbor), gamma_t.neighbor, type = "l", col = "dark green", lwd = 3)
legend( T*3/4, ylim_max, legend=c(expression(beta(t)),  expression(gamma(t))),
col = c("dark orange", "dark green"), bty = "n", lwd = 3, cex = 1.5, pt.cex = 1, bg = "transparent",
seg.len = 1.5, y.intersp = 1 , x.intersp = 1)
dev.off()
}
############################################
######## construct varibles ################
############################################
if(sim != 3){
y.list <- vector("list", T-1);
x.list <- vector("list", T-1);
for(i in 2:T){
y.list[[i-1]] <- matrix(c(R[i] - R[i-1], I[i] - I[i-1]), 2, 1);
x.temp <- matrix(0, 2, 2);
x.temp[1,2] <- I[i-1];
x.temp[2,1] <- I[i-1];
x.temp[2,2] <- -I[i-1];
x.list[[i-1]] <- x.temp;
}
Y <- y.list[[1]];
for(i in 2:(T-1)){
Y <- rbind(Y, y.list[[i]])
}
X <- x.list[[1]];
for(i in 2:(T-1)){
X <- rbind(X, x.list[[i]])
}
if(sim %in% c(2)){
z.list <- vector("list", T-1);
for(i in 2:T){
z.list[[i-1]] <- matrix(c(R.neighbor[i] - R.neighbor[i-1],
I.neighbor[i] - I.neighbor[i-1]), 2, 1);
}
Z <- z.list[[1]];
for(i in 2:(T-1)){
Z <- rbind(Z, z.list[[i]])
}
Z <- as.matrix(Z[-c( (nrow(Z) - 1), nrow(Z)), ])
Z <- as.matrix(c(Z[c(1, 2), ],  Z))
cor(X, Z)
}
beta_t <- sapply(1:length(y.list), function(jjj)  (y.list[[jjj]][1] + y.list[[jjj]][2])/I[jjj])
gamma_t <- sapply(1:length(y.list), function(jjj)  y.list[[jjj]][1]/I[jjj])
plot(beta_t, ylim = c(0, max(beta_t)))
lines(gamma_t)
Y_std <- sd(Y)
Y_s <- scale(Y, center = FALSE, scale = apply(Y, 2, sd, na.rm = TRUE))
plot(seq(1, length(Y_s),1),Y_s,type='l')
X_std <- apply(X, MARGIN = 2, FUN = sd)
X_s <- scale(X, center = FALSE, scale = apply(X, 2, sd, na.rm = TRUE))
###################################
p.x <- ncol(X)
p.y <-ncol(Y)
n <- nrow(X)
tol <- 10^(-4); # tolerance
max.iteration <- 200; # max number of iteration for the LASSO solution
method <- c("MLR")
#p is the number of variables for each day (I_t and R_t)
p <- 2
b_n <- p * b_t
if(sim == 1){
HBIC = FALSE
temp <- tbfl(method, Y_s, X_s, lambda.1.cv = lambda.1, lambda.2.cv = 0,
max.iteration = max.iteration, tol = tol, block.size = b_n, HBIC = HBIC)
}else{
HBIC = TRUE
gamma.val <- 10
temp <- tbfl(method, Y_s, X_s, lambda.1.cv = lambda.1, lambda.2.cv = 0,
max.iteration = max.iteration, tol = tol, block.size = b_n, HBIC = HBIC, gamma.val = gamma.val)
}
#change point date
cp.final <- temp$cp.final
c(1:n)[floor( (cp.final-1) / p) + 1]
cp.date <- c(1:n)[floor( (cp.final-1) / p) + 1]
pts.final[[j.1]] <- cp.date;
}
if(sim == 3){
y.list <- vector("list", T + t.test -1);
x.list <- vector("list", T + t.test -1);
for(i in 2:(T + t.test) ){
y.list[[i-1]] <- matrix(c(R[i] - R[i-1], I[i] - I[i-1]), 2, 1);
x.temp <- matrix(0, 2, 2);
x.temp[1,2] <- I[i-1];
x.temp[2,1] <- I[i-1];
x.temp[2,2] <- -I[i-1];
x.list[[i-1]] <- x.temp;
}
Y <- y.list[[1]];
for(i in 2:(T + t.test -1)){
Y <- rbind(Y, y.list[[i]])
}
X <- x.list[[1]];
for(i in 2:(T + t.test -1)){
X <- rbind(X, x.list[[i]])
}
z.list <- vector("list", T + t.test -1);
for(i in 2:(T + t.test) ){
z.list[[i-1]] <- matrix(c(R.neighbor[i] - R.neighbor[i-1],
I.neighbor[i] - I.neighbor[i-1]), 2, 1);
}
Z <- z.list[[1]];
for(i in 2:(T + t.test - 1)){
Z <- rbind(Z, z.list[[i]])
}
Z <- as.matrix(Z[-c( (nrow(Z) - 1), nrow(Z)), ])
Z <- as.matrix(c(Z[c(1, 2), ],  Z))
cor(X, Z)
Y.full <- Y
X.full <- X
Y.test <- as.matrix(Y.full[(nrow(Y) - (t.test)*2 + 1):nrow(Y), ])
X.test <- X.full[(nrow(X) - (t.test)*2 + 1):nrow(X), ]
Y.train <- as.matrix(Y.full[1 : (nrow(Y) - (t.test)*2 ), ])
X.train <- X.full[1 : (nrow(X) - (t.test)*2 ), ]
I.test <- I[(T + 1): (T + t.test)]
R.test <- R[(T + 1): (T + t.test)]
Y_std.train <- sd(Y.train)
Y_s.train <- scale(Y.train, center = FALSE, scale = apply(Y.train, 2, sd, na.rm = TRUE))
X_std.train <- apply(X.train, MARGIN = 2, FUN=sd)
X_s.train <- scale(X.train, center = FALSE, scale = apply(X.train, 2, sd, na.rm = TRUE))
p.x <- ncol(X_s.train)
p.y <- ncol(Y_s.train)
n <- nrow(X_s.train)
tol <- 10^(-4); # tolerance
max.iteration <- 200; # max number of iteration for the LASSO solution
method <- c("MLR")
p <- 2
b_n <- p * b_t
HBIC = TRUE
gamma.val <- 10
temp <- tbfl(method, Y_s.train, X_s.train, lambda.1.cv = lambda.1, lambda.2.cv = 0,
max.iteration = max.iteration, tol = tol, block.size = b_n,  HBIC = HBIC, gamma.val = gamma.val)
#change point date
cp.final <- temp$cp.final
c(1:n)[floor( (cp.final-1) / p) + 1]
cp.date <- c(1:n)[floor( (cp.final-1) / p) + 1]
pts.final[[j.1]] <- cp.date;
}
if(sim == 2){
cp <- c(1, temp$cp.final, n + 1)
m <- length(cp) - 1
X.new.2 <- matrix(0, nrow = n, ncol = m*p.x + 1)
for(i in 1:m){
X.new.2[cp[i]: (cp[i+1]-1), (p.x*(i-1)+1) : (p.x*i) ] <- X[cp[i]: (cp[i+1]-1), ]
}
X.new.2[, m*p.x + 1] <- Z
est.2 <- lm(Y ~ X.new.2  - 1)
Y.hat.2 <- est.2$fitted.values
summary(est.2)
lm.res[[j.1]] <- est.2
}
if(sim == 3){
cp <- c(1, temp$cp.final, n + 1)
m <- length(cp) - 1
X.new.new <- matrix(0, nrow = n, ncol = m*p.x)
for(i in 1:m){
X.new.new[cp[i]: (cp[i+1]-1), (p.x*(i-1)+1) : (p.x*i) ] <- X.train[cp[i]: (cp[i+1]-1), ]
}
est.1 <- lm(Y.train ~ X.new.new  - 1)
summary(est.1 )
Y.hat.1 <- est.1$fitted.values
Y.temp <- Y.train[cp[m]: (n), ]
X.temp <- X.train[cp[m]: (n), ]
est.temp <- lm(Y.temp ~ X.temp  - 1)
est.temp
Y.hat.1.new <- X.test%*%c(est.temp$coefficients)
R.hat.1.new <- rep(0, t.test)
for(i in 1:t.test){
R.hat.1.new[i] <- R[T + (i - 1)] + Y.hat.1.new[(i - 1)*2 + 1]
}
I.hat.1.new <- rep(0, t.test)
for(i in 1:t.test){
I.hat.1.new[i] <- I[T + (i - 1)] + Y.hat.1.new[(i - 1)*2 + 2]
}
MRPE_1_new <- mean(  abs ( (     c(R.hat.1.new, I.hat.1.new) - c(R.test, I.test) )  /c(R.test, I.test)  )[c(R.test, I.test) > 0]  )
MRPE_1_new_I <- mean(  abs ( (  c(I.hat.1.new) - c(I.test) )  /c(I.test)  )[c(I.test) > 0]  )
MRPE_1_new_R <- mean(  abs ( (     c(R.hat.1.new) - c(R.test)     )  /c(R.test)  )[c(R.test) > 0]  )
MRPE_1_new_Delta <- mean(  abs ( (  c(Y.hat.1.new) - c(Y.test)  )  /c(Y.test)  )[c(Y.test) > 0]  )
MRPE_1_new_I_Delta <- mean(  abs ( (c(Y.hat.1.new[seq(2, 2*t.test, 2)]) - c(Y.test[seq(2, 2*t.test, 2)])  )  /c(Y.test[seq(2, 2*t.test, 2)])  )[c(Y.test[seq(2, 2*t.test, 2)]) > 0]  )
MRPE_1_new_R_Delta <- mean(  abs ( (c(Y.hat.1.new[seq(1, 2*t.test, 2)]) - c(Y.test[seq(1, 2*t.test, 2)])  )  /c(Y.test[seq(1, 2*t.test, 2)])  )[c(Y.test[seq(1, 2*t.test, 2)]) > 0]  )
MRPE_1_Delta.final[j.1] <- MRPE_1_new_Delta; MRPE_1_I_Delta.final[j.1] <- MRPE_1_new_I_Delta; MRPE_1_R_Delta.final[j.1] <- MRPE_1_new_R_Delta;
MRPE_1.final[j.1] <- MRPE_1_new; MRPE_1_I.final[j.1] <- MRPE_1_new_I; MRPE_1_R.final[j.1] <- MRPE_1_new_R;
###################################
########  model 2
###################################
cp <- c(1, temp$cp.final, n + 1)
m <- length(cp) - 1
X.new.2 <- matrix(0, nrow = n, ncol = m*p.x + 1)
for(i in 1:m){
X.new.2[cp[i]: (cp[i+1]-1), (p.x*(i-1)+1) : (p.x*i) ] <- X.train[cp[i]: (cp[i+1]-1), ]
}
X.new.2[, m*p.x + 1] <- Z[1:n, ]
est.2 <- lm(Y.train[, ] ~ X.new.2[, ] - 1)
summary(est.2)
lm.res[[j.1]] <- est.2
Y.hat.2 <- est.2 $fitted.values
beta.t.est <- est.2$coefficients[m*p.x - 1]
gamma.t.est <- est.2$coefficients[m*p.x ]
alpha.t.est <- est.2$coefficients[m*p.x + 1]
Y.hat.2.new <- X.test%*%c(beta.t.est, gamma.t.est) + as.matrix(Z[(n+1): nrow(Z), ])%*%c(alpha.t.est)
R.hat.2.new <- rep(0, t.test)
for(i in 1:t.test){
R.hat.2.new[i] <- R[T + (i - 1)] + Y.hat.2.new[(i - 1)*2 + 1]
}
I.hat.2.new <- rep(0, t.test)
for(i in 1:t.test){
I.hat.2.new[i] <- I[T + (i - 1)] + Y.hat.2.new[(i - 1)*2 + 2]
}
MRPE_2_new <- mean(  abs ( (     c(R.hat.2.new, I.hat.2.new) - c(R.test, I.test) )  /c(R.test, I.test)  )[c(R.test, I.test) > 0]  )
MRPE_2_new_I <- mean(  abs ( (  c(I.hat.2.new) - c(I.test) )  /c(I.test)  )[c(I.test) > 0]  )
MRPE_2_new_R <- mean(  abs ( (     c(R.hat.2.new) - c(R.test)     )  /c(R.test)  )[c(R.test) > 0]  )
MRPE_2_new_Delta <- mean(  abs ( (  c(Y.hat.2.new) - c(Y.test)  )  /c(Y.test)  )[c(Y.test) > 0]  )
MRPE_2_new_I_Delta <- mean(  abs ( (c(Y.hat.2.new[seq(2, 2*t.test, 2)]) - c(Y.test[seq(2, 2*t.test, 2)])  )  /c(Y.test[seq(2, 2*t.test, 2)])  )[c(Y.test[seq(2, 2*t.test, 2)]) > 0]  )
MRPE_2_new_R_Delta <- mean(  abs ( (c(Y.hat.2.new[seq(1, 2*t.test, 2)]) - c(Y.test[seq(1, 2*t.test, 2)])  )  /c(Y.test[seq(1, 2*t.test, 2)])  )[c(Y.test[seq(1, 2*t.test, 2)]) > 0]  )
MRPE_2_Delta.final[j.1] <- MRPE_2_new_Delta; MRPE_2_I_Delta.final[j.1] <- MRPE_2_new_I_Delta; MRPE_2_R_Delta.final[j.1] <- MRPE_2_new_R_Delta;
MRPE_2.final[j.1] <- MRPE_2_new; MRPE_2_I.final[j.1] <- MRPE_2_new_I; MRPE_2_R.final[j.1] <- MRPE_2_new_R;
###################################
########  model 3
###################################
Delta.R.hat <- rep(0, T - 1)
Delta.R <- rep(0, T - 1)
for(i in 2:T){
Delta.R.hat[i - 1] <- Y.hat.2[(i - 2)*2 + 1]
Delta.R[i - 1] <- Y[(i - 2)*2 + 1]
}
Delta.R.hat <- Delta.R.hat
Delta.R <- Delta.R
Delta.I.hat <- rep(0, T - 1)
Delta.I <- rep(0, T - 1)
for(i in 2:T){
Delta.I.hat[i - 1] <- Y.hat.2[(i - 2)*2 + 2]
Delta.I[i - 1] <- Y[(i - 2)*2 + 2]
}
Delta.I.hat <- Delta.I.hat
Delta.I <- Delta.I
residual_Delta.I <- Delta.I - Delta.I.hat
residual_Delta.R <- Delta.R - Delta.R.hat
res <- c()
for(i in 1:n){
res <- c(res,  Y[i] - Y.hat.2[i])
}
residual.matrix <- cbind(residual_Delta.R, residual_Delta.I)
print("estimated sample variance for hat residual:")
print(var(residual.matrix))
var <- VARselect(residual.matrix, lag.max = 7, type = "none")
var$selection
# choose the p by BIC
p.est <- var$selection["SC(n)"]
var1 <- VAR(residual.matrix, p = p.est, type = "none")
norm.res1 <-normality.test(var1)
norm.res1
Sigma.est <- summary(var1)$covres
coef.matrix <- Bcoef(var1)
coef.matrix
var.coef.res[[j.1]] <- coef.matrix
#fitted the residual
residual.hat <- fitted(var1)
#vectorize the fitted residuals
residual.hat.vec <- rep(0, nrow(residual.hat)*2)
#fitted residual of Delta R
residual.hat.vec[seq(1, nrow(residual.hat)*2, 2)] <- residual.hat[, 1]
#fitted residual of Delta I
residual.hat.vec[seq(2, nrow(residual.hat)*2, 2)] <- residual.hat[, 2]
Y.hat.3 <- Y.hat.2 + c(rep(0, p.est*2),  residual.hat.vec)
##predict the residual
predict.temp <- predict(var1, n.ahead = t.test)$fcst
#vectorize the fitted residuals
residual.test.hat.vec <- rep(0, t.test*2)
#fitted residual of Delta R
residual.test.hat.vec[seq(1, t.test*2, 2)] <- predict.temp$residual_Delta.R[, 1]
#fitted residual of Delta I
residual.test.hat.vec[seq(2, t.test*2, 2)] <- predict.temp$residual_Delta.I[, 1]
Y.hat.3.new <- Y.hat.2.new +  residual.test.hat.vec
R.hat.3.new <- rep(0, t.test)
for(i in 1:t.test){
R.hat.3.new[i] <- R[T + (i - 1)] + Y.hat.3.new[(i - 1)*2 + 1]
}
I.hat.3.new <- rep(0, t.test)
for(i in 1:t.test){
I.hat.3.new[i] <- I[T + (i - 1)] + Y.hat.3.new[(i - 1)*2 + 2]
}
MRPE_3_new <- mean(  abs ( (     c(R.hat.3.new, I.hat.3.new) - c(R.test, I.test) )  /c(R.test, I.test)  )[c(R.test, I.test) > 0]  )
MRPE_3_new_I <- mean(  abs ( (  c(I.hat.3.new) - c(I.test) )  /c(I.test)  )[c(I.test) > 0]  )
MRPE_3_new_R <- mean(  abs ( (     c(R.hat.3.new) - c(R.test)     )  /c(R.test)  )[c(R.test) > 0]  )
MRPE_3_new_Delta <- mean(  abs ( (  c(Y.hat.3.new) - c(Y.test)  )  /c(Y.test)  )[c(Y.test) > 0]  )
MRPE_3_new_I_Delta <- mean(  abs ( (c(Y.hat.3.new[seq(2, 2*t.test, 2)]) - c(Y.test[seq(2, 2*t.test, 2)])  )  /c(Y.test[seq(2, 2*t.test, 2)])  )[c(Y.test[seq(2, 2*t.test, 2)]) > 0]  )
MRPE_3_new_R_Delta <- mean(  abs ( (c(Y.hat.3.new[seq(1, 2*t.test, 2)]) - c(Y.test[seq(1, 2*t.test, 2)])  )  /c(Y.test[seq(1, 2*t.test, 2)])  )[c(Y.test[seq(1, 2*t.test, 2)]) > 0]  )
MRPE_3_Delta.final[j.1] <- MRPE_3_new_Delta; MRPE_3_I_Delta.final[j.1] <- MRPE_3_new_I_Delta; MRPE_3_R_Delta.final[j.1] <- MRPE_3_new_R_Delta;
MRPE_3.final[j.1] <- MRPE_3_new; MRPE_3_I.final[j.1] <- MRPE_3_new_I; MRPE_3_R.final[j.1] <- MRPE_3_new_R;
}
}
MRPE_3_new
MRPE_3_new_I
MRPE_3_new_R
MRPE_2_new_R
MRPE_3_Delta.final
MRPE_1_I.final
lm.res
temp.coef
unlist(var.coef.res)
var.coef.vec <- unlist(var.coef.res)
var.coef.mean <- matrix(0, ncol  = 2, nrow = 2)
var.coef.mean[1, 1] <- mean(var.coef.vec[seq(1, length(var.coef.vec), 4)])
var.coef.mean[2, 1] <- mean(var.coef.vec[seq(2, length(var.coef.vec), 4)])
var.coef.mean[1, 2] <- mean(var.coef.vec[seq(3, length(var.coef.vec), 4)])
var.coef.mean[2, 2] <- mean(var.coef.vec[seq(4, length(var.coef.vec), 4)])
var.coef.mean
if(sim ==3){
var.coef.vec <- unlist(var.coef.res)
var.coef.mean <- matrix(0, ncol  = 2, nrow = 2)
var.coef.mean[1, 1] <- mean(var.coef.vec[seq(1, length(var.coef.vec), 4)])
var.coef.mean[2, 1] <- mean(var.coef.vec[seq(2, length(var.coef.vec), 4)])
var.coef.mean[1, 2] <- mean(var.coef.vec[seq(3, length(var.coef.vec), 4)])
var.coef.mean[2, 2] <- mean(var.coef.vec[seq(4, length(var.coef.vec), 4)])
print(var.coef.mean)
}
?fviz_cluster
